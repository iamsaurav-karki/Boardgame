name: Java CI with Maven
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Upload the artifact
        uses: actions/upload-artifact@v4
        with:
          name: Boardgame
          path: target/*.jar

      - name: Trivy FS scan
        run: |
          trivy fs --format table -o fs.html .

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Install JQ
        run: |
          sudo apt-get update
          sudo apt-get install jq -y

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t sauravkarki/boardgame:v2 .

      - name: Trivy Image Scan
        run: |
          trivy image --format table -o trivy-image-report.html sauravkarki/boardgame:v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        run: |
          docker push sauravkarki/boardgame:v2

      - name: Deploy to Kubernetes
        uses: tale/kubectl-action@v1
        with:
          bas64-kube-config: ${{ secrets.KUBE_CONFIG }}
          namespace: webapps
      - run: |
          kubectl apply -f deployment-service.yaml -n webapps
          kubectl get all -n webapps
          kubectl get svc -n webapps
